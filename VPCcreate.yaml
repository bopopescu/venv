AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template

Metadata:
 AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label1:
          default: "Network Configuration"
        Parameters:
          - Enviroment
          - VPCBlock
          - VPCBlock2
      -
        Label1:
          default: "Subnets CIDR Block"
        Parameters:
          - PublicSubnetACIDR
          - PublicSubnetBCIDR
          - PrivateSubnetACIDR
          - PrivateSubnetBCIDR
          - DatabaseSubnetACIDR
          - DatabaseSubnetBCIDR

Parameters:
  Enviroment:
    Type: String
    Default: "ENV-PROD"

  VPCBlock:
    Type: String
    Default: '10.0.0.0/16'

  VPCBlock2:
    Type: String
    Default: '192.0.0.0/16'

  PublicSubnetACIDR:
    Type: String
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR:
    Type: String
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"

  PrivateSubnetACIDR:
    Type: String
    Default: '10.0.11.0/24'
    Description: "Private Subnet-A CIDR"

  PrivateSubnetBCIDR:
    Type: String
    Default: '10.0.21.0/24'
    Description: "Private Subnet-B CIDR"

  DatabaseSubnetACIDR:
    Type: String
    Default: '192.0.30.0/24'
    Description: "Database Subnet-A CIDR"
  DatabaseSubnetBCIDR:
    Type: String
    Default: '192.0.31.0/24'
    Description: "Database Subnet-B CIDR"

Resources:
  VPC:
     Type: AWS::EC2::VPC
     Properties:
       CidrBlock: !Ref VPCBlock
       EnableDnsSupport: true
       EnableDnsHostnames: true
       Tags:
        - Key: Name
          Value: !Ref Enviroment

  VPCCidrBlock2:
     Type: AWS::EC2::VPCCidrBlock
     DependsOn: VPC
     DeletionPolicy: Delete
     Properties:
       CidrBlock: !Ref VPCBlock2
       VpcId: !Ref VPC

  GatewayInternet:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
       - Key: Name
         Value: !Ref Enviroment

  GatewayAttachmentInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
       VpcId: !Ref VPC
       InternetGatewayId: !Ref GatewayInternet

#PUBLIC_ROUTETABLES

  RouteTableForPublicSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "PublicRouteTable" ] ]

  RoutesForPublicRouteTable:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GatewayInternet
      RouteTableId: !Ref RouteTableForPublicSubnet

#PRIVATE_ROUTETABLES

  RouteTableForPrivateSubnetA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "PrivateRouteTableA" ] ]

  RouteTableForPrivateSubnetB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "PrivateRouteTableB" ] ]

#ROUTES FOR PRIVATE SUBNET RouteTable USING_NAT

  RoutesForPrivateRouteTableA:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayA
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTableForPrivateSubnetA
      NatGatewayId: !Ref NATGatewayA

  RoutesForPrivateRouteTableA:
    Type: AWS::EC2::Route
    DependsOn: NATGatewayB
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTableForPrivateSubnetB
      NatGatewayId: !Ref NATGatewayB

# ASSOSIATE PUBLIC SUBNET WITH PUBLIC ROUTES

  RouteAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetA

  RouteAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetB

# ASSOSIATE Private SUBNET WITH private ROUTES

  RouteAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnetA
      SubnetId: !Ref PrivateSubnetA

  RouteAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPrivateSubnetB
      SubnetId: !Ref PrivateSubnetB

# ROUTE TABLE and ROUTE ASSOCIATION for internal only - Database

  RouteTableForDatabases:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "DatabaseRouteTable" ] ]

  RouteAssociationDatabaseA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForDatabases
      SubnetId: !Ref DatabaseSubnetA

  RouteAssociationDatabaseA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForDatabases
      SubnetId: !Ref DatabaseSubnetB

# Elastic IP for NAT Gateway
  EIP1:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachmentInternet
    Properties:
      Domain: !Ref VPC
  EIP2:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachmentInternet
    Properties:
      Domain: !Ref VPC


# NAT Gateway

  NATGatewayA:
    DependsOn: GatewayAttachmentInternet
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetA
      AllocationId: !GetAtt EIP1.AllocationId
      Tags:
       - Key: Name
         Value: NAT-A


  NATGatewayB:
    DependsOn: GatewayAttachmentInternet
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetB
      AllocationId: !GetAtt EIP2.AllocationId
      Tags:
       - Key: Name
         Value: NAT-B

# SUBNET CREATION

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region"} ]
      CidrBlock: !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "-Public-A" ] ]


  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region"} ]
      CidrBlock: !Ref PublicSubnetBCIDR
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "-Public-B" ] ]

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: 'AWS::Region'} ]
      CidrBlock: !Ref PrivateSubnetACIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "-Private-A" ] ]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region"} ]
      CidrBlock: !Ref PrivateSubnetBCIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "-Private-B" ] ]

  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPCCidrBlock2
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region"} ]
      CidrBlock: !Ref DatabaseSubnetACIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "-Database-A" ] ]

  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: VPCCidrBlock2
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region"} ]
      CidrBlock: !Ref DatabaseSubnetBCIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Join [ " ", [ !Ref Enviroment, "-Database-B" ] ]
